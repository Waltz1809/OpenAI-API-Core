#!/usr/bin/env python3
"""
D·ªãch CLI - Ch∆∞∆°ng tr√¨nh d·ªãch thu·∫≠t s·ª≠ d·ª•ng AI APIs
Entry point ch√≠nh v·ªõi menu interactive
"""

import sys
import os

# Add core modules to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'core'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'workflows'))

from core.ai_factory import load_configs
from workflows.translate import TranslateWorkflow
from workflows.retry import RetryWorkflow  
from workflows.analyze import AnalyzeWorkflow


def show_menu():
    """Hi·ªÉn th·ªã menu ch·ªçn workflow."""
    print("\n" + "="*50)
    print("           D·ªäCH CLI - MENU CH√çNH")
    print("="*50)
    print("1. D·ªãch thu·∫≠t (Translate)")
    print("2. D·ªãch l·∫°i c√°c segment l·ªói (Retry)")  
    print("3. Ph√¢n t√≠ch ng·ªØ c·∫£nh (Context Analysis)")
    print("0. Tho√°t")
    print("="*50)


def get_user_choice():
    """L·∫•y l·ª±a ch·ªçn t·ª´ user."""
    while True:
        try:
            choice = input("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (0-3): ").strip()
            
            if choice in ['0', '1', '2', '3']:
                return choice
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p 0, 1, 2, ho·∫∑c 3.")
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è ƒê√£ h·ªßy ch∆∞∆°ng tr√¨nh.")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")


def run_workflow(choice: str, config: dict, secret: dict):
    """Ch·∫°y workflow t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn."""
    try:
        if choice == '1':
            print(f"\nüöÄ B·∫ÆT ƒê·∫¶U WORKFLOW: D·ªäCH THU·∫¨T")
            print(f"üìÅ File ngu·ªìn: {config['active_task']['source_yaml_file']}")
            workflow = TranslateWorkflow(config, secret)
            workflow.run()
            
        elif choice == '2':
            print(f"\nüîÑ B·∫ÆT ƒê·∫¶U WORKFLOW: RETRY")
            workflow = RetryWorkflow(config, secret)
            workflow.run()
            
        elif choice == '3':
            print(f"\nüîç B·∫ÆT ƒê·∫¶U WORKFLOW: PH√ÇN T√çCH NG·ªÆ C·∫¢NH")
            print(f"üìÅ File ngu·ªìn: {config['active_task']['source_yaml_file']}")
            workflow = AnalyzeWorkflow(config, secret)
            workflow.run()
            
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh th·ª±c thi: {e}")
        return False
    
    return True

def main():
    """H√†m main ch√≠nh."""
    print("üéØ D·ªäCH CLI - Ch∆∞∆°ng tr√¨nh d·ªãch thu·∫≠t AI")
    print("   Phi√™n b·∫£n m·ªõi - Clean & Simple")
    
    try:
        # Load configs
        config, secret = load_configs()
        print("‚úÖ ƒê√£ load config th√†nh c√¥ng")
        
        while True:
            show_menu()
            choice = get_user_choice()
            
            if choice == '0':
                print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng D·ªãch CLI!")
                break
            
            # Ch·∫°y workflow
            success = run_workflow(choice, config, secret)
            
            if success:
                print("\nüéâ Workflow ho√†n th√†nh!")
                
                # H·ªèi c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
                continue_choice = input("\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c v·ªõi workflow kh√°c? (y/n): ").strip().lower()
                if continue_choice != 'y':
                    print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng D·ªãch CLI!")
                    break
            else:
                print("\nüí• Workflow th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i config v√† th·ª≠ l·∫°i.")
    
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o: {e}")
        print("üí° H√£y ki·ªÉm tra file config.json v√† secret.json")
        sys.exit(1)


if __name__ == "__main__":
    main()
