#!/usr/bin/env python3
"""
AI Factory - Factory pattern ƒë·ªÉ t·∫°o AI clients ph√π h·ª£p
"""

import json
import os
from typing import Dict, Union

from .openai_client import OpenAIClient
from .gemini_client import GeminiClient
from .vertex_client import VertexClient
from .key_rotator import KeyRotator


# Global key rotator instance
_global_key_rotator = None


class AIClientFactory:
    """Factory ƒë·ªÉ t·∫°o AI clients d·ª±a tr√™n config."""
    
    @staticmethod
    def create_client(api_config: Dict, secret_config: Dict) -> Union[OpenAIClient, GeminiClient, VertexClient]:
        """
        T·∫°o client ph√π h·ª£p d·ª±a tr√™n config v·ªõi multi-key rotation support.
        
        Args:
            api_config: Config cho API (model, temperature, etc.)
            secret_config: Secret credentials (c√≥ th·ªÉ ch·ª©a multiple keys)
            
        Returns:
            AI Client instance
        """
        global _global_key_rotator
        
        # Initialize rotator n·∫øu ch∆∞a c√≥
        if _global_key_rotator is None:
            print("üîÑ AI Factory: Initializing KeyRotator...")
            _global_key_rotator = KeyRotator(secret_config)
            # Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan
            status = _global_key_rotator.get_status()
            print(f"üìä KeyRotator Status: {status}")
        
        # L·∫•y provider t·ª´ config
        provider = api_config.get('provider', 'openai').lower()
        
        if provider == 'vertex':
            # Vertex v·∫´n d√πng c√°ch c≈© (key c·ªë ƒë·ªãnh)
            key_config = _global_key_rotator.get_next_key(provider)
            if key_config is None:
                available_providers = list(_global_key_rotator.get_status().keys())
                raise ValueError(f"Kh√¥ng t√¨m th·∫•y key n√†o cho provider: {provider}. Available: {available_providers}")
            return VertexClient(api_config, key_config)
            
        elif provider == 'gemini':
            # Gemini d√πng per-request rotation
            return GeminiClient(api_config, _global_key_rotator)
            
        elif provider == 'openai':
            # OpenAI v·∫´n d√πng c√°ch c≈© (key c·ªë ƒë·ªãnh)
            key_config = _global_key_rotator.get_next_key(provider)
            if key_config is None:
                available_providers = list(_global_key_rotator.get_status().keys())
                raise ValueError(f"Kh√¥ng t√¨m th·∫•y key n√†o cho provider: {provider}. Available: {available_providers}")
            return OpenAIClient(api_config, key_config)
            
        else:
            raise ValueError(f"Provider kh√¥ng h·ªó tr·ª£: {provider}. Ch·ªâ h·ªó tr·ª£: openai, gemini, vertex")
    
    @staticmethod
    def get_provider_name(api_config: Dict) -> str:
        """
        Tr·∫£ v·ªÅ t√™n provider d·ª±a tr√™n config.
        
        Args:
            api_config: Config cho API
            
        Returns:
            str: "vertex", "gemini", ho·∫∑c "openai"
        """
        return api_config.get('provider', 'openai').lower()
    
    @staticmethod
    def get_sdk_code(api_config: Dict) -> str:
        """
        Tr·∫£ v·ªÅ SDK code cho naming convention d·ª±a tr√™n provider.
        
        Args:
            api_config: Config cho API
            
        Returns:
            str: "oai", "gmn", ho·∫∑c "vtx"
        """
        provider = api_config.get('provider', 'openai').lower()
        mapping = {
            'openai': 'oai',
            'gemini': 'gmn', 
            'vertex': 'vtx'
        }
        return mapping.get(provider, 'oai')
    
    @staticmethod
    def get_key_rotator_status() -> Dict:
        """
        L·∫•y th√¥ng tin v·ªÅ tr·∫°ng th√°i c·ªßa key rotator.
        
        Returns:
            Dict: Status info cho t·ª´ng provider
        """
        global _global_key_rotator
        if _global_key_rotator is None:
            return {}
        return _global_key_rotator.get_status()
    
    @staticmethod
    def has_multiple_keys(provider: str) -> bool:
        """
        Check xem provider c√≥ nhi·ªÅu h∆°n 1 key kh√¥ng.
        
        Args:
            provider: "openai", "gemini", ho·∫∑c "vertex"
            
        Returns:
            bool: True n·∫øu c√≥ > 1 key
        """
        global _global_key_rotator
        if _global_key_rotator is None:
            return False
        return _global_key_rotator.has_multiple_keys(provider)


def load_configs() -> tuple[Dict, Dict]:
    """
    Load c·∫£ config.json v√† secrets.json.
    
    Returns:
        Tuple[config, secret]: Config ch√≠nh v√† secret credentials
    """
    # Load config.json t·ª´ th∆∞ m·ª•c dich_cli/
    script_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    config_path = os.path.join(script_dir, 'config.json')
    
    if not os.path.exists(config_path):
        raise FileNotFoundError("File config.json kh√¥ng t·ªìn t·∫°i")
    
    with open(config_path, 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    # Load secrets.json t·ª´ th∆∞ m·ª•c g·ªëc (Dich/)
    # script_dir = dich_cli/, parent = Dich/
    parent_dir = os.path.dirname(script_dir)
    secrets_path = os.path.join(parent_dir, 'secrets.json')
    
    if not os.path.exists(secrets_path):
        # Fallback: t√¨m trong th∆∞ m·ª•c dich_cli/ (cho compatibility)
        fallback_path = os.path.join(script_dir, 'secret.json')
        if os.path.exists(fallback_path):
            secrets_path = fallback_path
        else:
            # T·∫°o t·ª´ template n·∫øu ch∆∞a c√≥
            template_path = os.path.join(script_dir, 'secret_template.json')
            if os.path.exists(template_path):
                raise FileNotFoundError(
                    f"File secrets.json kh√¥ng t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc: {secrets_path}\n"
                    f"H√£y copy {template_path} th√†nh secrets.json ·ªü th∆∞ m·ª•c g·ªëc v√† ƒëi·ªÅn API keys."
                )
            else:
                raise FileNotFoundError(f"File secrets.json kh√¥ng t·ªìn t·∫°i: {secrets_path}")
    
    with open(secrets_path, 'r', encoding='utf-8') as f:
        secret = json.load(f)
    
    print(f"‚úÖ Loaded secrets from: {secrets_path}")
    return config, secret
