#!/usr/bin/env python3
"""
Master Workflow - Script ƒëi·ªÅu ph·ªëi ch√≠nh
ƒê·ªçc file config v√† quy·∫øt ƒë·ªãnh ch·∫°y workflow n√†o (d·ªãch, retry, etc.)
"""

import json
import os
import sys

# Th√™m c√°c ƒë∆∞·ªùng d·∫´n c·∫ßn thi·∫øt ƒë·ªÉ import module t·ª´ c√°c th∆∞ m·ª•c kh√°c
script_dir = os.path.dirname(os.path.abspath(__file__))
utils_test_dir = os.path.abspath(os.path.join(script_dir, '../utils_test'))
utils_dir = os.path.abspath(os.path.join(script_dir, '../utils'))
sys.path.append(utils_test_dir)
sys.path.append(utils_dir)
sys.path.append(script_dir)

# Import c√°c workflow con
try:
    from translation_workflow import translation_workflow
    from auto_retry_system import retry_workflow
except ImportError as e:
    print(f"L·ªói import: {e}")
    print("H√£y ƒë·∫£m b·∫£o c√°c file workflow con (translation_workflow.py, auto_retry_system.py) t·ªìn t·∫°i.")
    sys.exit(1)


def load_master_config(config_path='workflow_config.json'):
    """T·∫£i v√† ki·ªÉm tra file c·∫•u h√¨nh ch√≠nh."""
    config_full_path = os.path.join(script_dir, config_path)
    if not os.path.exists(config_full_path):
        print(f"‚ùå L·ªói: File c·∫•u h√¨nh '{config_full_path}' kh√¥ng t·ªìn t·∫°i.")
        return None
    
    try:
        with open(config_full_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        if 'active_task' not in config or 'workflow_mode' not in config['active_task']:
            print("‚ùå L·ªói: File c·∫•u h√¨nh thi·∫øu 'active_task' ho·∫∑c 'workflow_mode'.")
            return None
            
        return config
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªçc file c·∫•u h√¨nh: {e}")
        return None

def run_translation_mode(config):
    """Ch·∫°y ch·∫ø ƒë·ªô d·ªãch thu·∫≠t."""
    # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc cho ch·∫ø ƒë·ªô n√†y
    source_yaml = config['active_task'].get('source_yaml_file')
    prompt_file = config['paths'].get('prompt_file')

    if not source_yaml or not os.path.exists(source_yaml):
        print(f"‚ùå L·ªói (Ch·∫ø ƒë·ªô D·ªãch): File ngu·ªìn 'source_yaml_file' ('{source_yaml}') kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i trong config.")
        return

    if not prompt_file or not os.path.exists(prompt_file):
        print(f"‚ùå L·ªói (Ch·∫ø ƒë·ªô D·ªãch): File prompt 'prompt_file' ('{prompt_file}') kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i trong config.")
        return

    print("\n" + "="*60)
    print("üöÄ B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô: D·ªäCH THU·∫¨T (TRANSLATE)")
    print(f"   T√°c v·ª•: {config['active_task'].get('task_name', 'Kh√¥ng c√≥ t√™n')}")
    print("="*60 + "\n")
    
    # G·ªçi workflow d·ªãch thu·∫≠t v√† truy·ªÅn to√†n b·ªô config v√†o
    translation_workflow(config)
    

def find_latest_log_file(log_dir):
    """
    T√¨m file log (.log) ƒë∆∞·ª£c ch·ªânh s·ª≠a g·∫ßn ƒë√¢y nh·∫•t trong m·ªôt th∆∞ m·ª•c.
    C·∫£i ti·∫øn: Ch·ªâ t√¨m c√°c file log c·ªßa qu√° tr√¨nh 'translate' (th∆∞·ªùng c√≥ '_cleaned_' trong t√™n).
    """
    if not os.path.isdir(log_dir):
        return None
    
    # L·ªçc ch·ªâ nh·ªØng file log c·ªßa qu√° tr√¨nh translate (c√≥ ch·ªØ '_cleaned_')
    log_files = [
        os.path.join(log_dir, f) 
        for f in os.listdir(log_dir) 
        if f.endswith('.log') and '_cleaned_' in f
    ]
    
    if not log_files:
        return None
        
    latest_file = max(log_files, key=os.path.getmtime)
    return latest_file

def run_retry_mode(config):
    """Ch·∫°y ch·∫ø ƒë·ªô retry."""
    source_log = config['active_task'].get('source_log_file_for_retry')
    
    # T·ª± ƒë·ªông t√¨m file log m·ªõi nh·∫•t n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if source_log == "LATEST":
        log_dir = config.get('paths', {}).get('log_dir')
        if not log_dir:
            print("‚ùå L·ªói (Ch·∫ø ƒë·ªô Retry): Kh√¥ng th·ªÉ t·ª± ƒë·ªông t√¨m log khi 'paths.log_dir' kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong config.")
            return
            
        print(f"üîé ƒêang t·ª± ƒë·ªông t√¨m file log m·ªõi nh·∫•t trong: {log_dir}...")
        latest_log = find_latest_log_file(log_dir)
        
        if not latest_log:
            print(f"‚ùå L·ªói (Ch·∫ø ƒë·ªô Retry): Kh√¥ng t√¨m th·∫•y file log n√†o trong th∆∞ m·ª•c '{log_dir}'.")
            return
        
        source_log = latest_log
        print(f"‚úÖ ƒê√£ t√¨m th·∫•y file log m·ªõi nh·∫•t: {source_log}")
        # C·∫≠p nh·∫≠t l·∫°i config ƒë·ªÉ truy·ªÅn ƒëi cho ƒë√∫ng
        config['active_task']['source_log_file_for_retry'] = source_log

    # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc cho ch·∫ø ƒë·ªô n√†y
    if not source_log or not os.path.exists(source_log):
        print(f"‚ùå L·ªói (Ch·∫ø ƒë·ªô Retry): File log 'source_log_file_for_retry' ('{source_log}') kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.")
        return
        
    # Ch·∫ø ƒë·ªô retry c·∫ßn bi·∫øt file YAML g·ªëc ƒë·ªÉ l·∫•y n·ªôi dung segment.
    source_yaml = config['active_task'].get('source_yaml_file')
    if not source_yaml or not os.path.exists(source_yaml):
        print(f"‚ùå L·ªói (Ch·∫ø ƒë·ªô Retry): Ph·∫£i cung c·∫•p 'source_yaml_file' h·ª£p l·ªá trong config ƒë·ªÉ retry.")
        return

    print("\n" + "="*60)
    print("üîÑ B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô: D·ªäCH L·∫†I (RETRY)")
    print(f"   T√°c v·ª•: {config['active_task'].get('task_name', 'Kh√¥ng c√≥ t√™n')}")
    print("="*60 + "\n")
    
    # G·ªçi workflow retry v√† truy·ªÅn to√†n b·ªô config v√†o
    retry_workflow(config)

def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y master workflow."""
    print("=============================================")
    print("      KH·ªûI ƒê·ªòNG MASTER WORKFLOW      ")
    print("=============================================")
    
    config = load_master_config()
    
    if config is None:
        print("\nD·ª´ng ch∆∞∆°ng tr√¨nh do l·ªói c·∫•u h√¨nh.")
        return
        
    mode = config['active_task'].get('workflow_mode')
    
    if mode == 'translate':
        run_translation_mode(config)
    elif mode == 'retry':
        run_retry_mode(config)
    else:
        print(f"‚ùå L·ªói: Ch·∫ø ƒë·ªô workflow '{mode}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
        print("Vui l√≤ng ch·ªçn 'translate' ho·∫∑c 'retry' trong file workflow_config.json.")

if __name__ == "__main__":
    main() 